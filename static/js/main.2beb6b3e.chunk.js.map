{"version":3,"sources":["service_worker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","_callee2","config","sw","regenerator_default","a","wrap","_context2","prev","next","navigator","URL","process","href","origin","abrupt","addEventListener","Object","asyncToGenerator","mark","_callee","swUrl","_context","concat","checkValidServiceWorker","sent","serviceWorker","ready","then","console","log","registerValidSW","stop","_callee3","registration","_context3","register","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","_callee4","response","contentType","_context4","fetch","headers","get","status","indexOf","unregister","reload","_x","_register","apply","this","arguments"],"mappings":"iKAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sGAIC,SAAAC,EAAwBC,GAAxB,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACD,kBAAmBC,WADlB,CAAAH,EAAAE,KAAA,WAGe,IAAIE,IAAIC,GAAwBf,OAAOC,SAASe,MACpDC,SAAWjB,OAAOC,SAASgB,OAJtC,CAAAP,EAAAE,KAAA,eAAAF,EAAAQ,OAAA,wBAWHlB,OAAOmB,iBAAiB,OAAxBC,OAAAC,EAAA,EAAAD,CAAAb,EAAAC,EAAAc,KAAgC,SAAAC,IAAA,IAAAC,EAAA,OAAAjB,EAAAC,EAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,UACxBY,EADwB,GAAAE,OACbX,GADa,uBAG1BjB,EAH0B,CAAA2B,EAAAb,KAAA,eAAAa,EAAAb,KAAA,EAKjBe,EAAwBH,EAAOnB,GALd,OAK5BC,EAL4BmB,EAAAG,KAW5Bf,UAAUgB,cAAcC,MAAMC,KAAK,WACjCC,QAAQC,IACN,8GAbwBR,EAAAb,KAAA,uBAAAa,EAAAb,KAAA,GAmBjBsB,EAAgBV,EAAOnB,GAnBN,QAmB5BC,EAnB4BmB,EAAAG,KAAA,yBAAAH,EAAAU,SAAAZ,OAX7Bb,EAAAQ,OAAA,SAoCIZ,GApCJ,wBAAAI,EAAAyB,SAAA/B,sCAwCQ8B,iFAAf,SAAAE,EAA+BZ,EAAOnB,GAAtC,IAAAgC,EAAA,OAAA9B,EAAAC,EAAAC,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA1B,KAAA,EAC6BC,UAAUgB,cAAcU,SAASf,GAD9D,cACQa,EADRC,EAAAV,MAEeY,cAAgB,WAC3B,IAAMC,EAAmBJ,EAAaK,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf/B,UAAUgB,cAAcgB,YAI1Bb,QAAQC,IACN,gHAKE5B,GAAUA,EAAOyC,UACnBzC,EAAOyC,SAAST,KAMlBL,QAAQC,IAAI,sCAGR5B,GAAUA,EAAO0C,WACnB1C,EAAO0C,UAAUV,QA9B7BC,EAAApB,OAAA,SAoCSmB,GApCT,wBAAAC,EAAAH,SAAAC,sCAuCeT,iFAAf,SAAAqB,EAAuCxB,EAAOnB,GAA9C,IAAA4C,EAAAC,EAAA,OAAA3C,EAAAC,EAAAC,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAvC,KAAA,EAEyBwC,MAAM5B,GAF/B,UAEQyB,EAFRE,EAAAvB,KAKQsB,EAAcD,EAASI,QAAQC,IAAI,gBAEnB,MAApBL,EAASM,SACO,MAAfL,IAA8D,IAAvCA,EAAYM,QAAQ,eARhD,CAAAL,EAAAvC,KAAA,QAWIC,UAAUgB,cAAcC,MAAMC,KAAK,SAAAM,GACjCA,EAAaoB,aAAa1B,KAAK,WAC7B/B,OAAOC,SAASyD,aAbxBP,EAAAvC,KAAA,sBAAAuC,EAAAjC,OAAA,SAkBWgB,EAAgBV,EAAOnB,IAlBlC,wBAAA8C,EAAAhB,SAAAa,8BA/EO,SAAPW,GAAAC,EAAAC,MAAAC,KAAAC,WCfAlC,GAEI,kBAAmBhB,WACrBA,UAAUgB,cAAcU,SAAS","file":"static/js/main.2beb6b3e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport async function register(config) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    var sw;\n    window.addEventListener('load', async () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        sw = await checkValidServiceWorker(swUrl, config);\n        // sw.addEventListener(\"push\", function (e) {\n        //   console.log(e);\n        // })\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        sw = await registerValidSW(swUrl, config);\n        // sw.addEventListener(\"push\", function (e) {\n        //   console.log(e);\n        // })\n      }\n    });\n    return sw;\n  }\n}\n\nasync function registerValidSW(swUrl, config) {\n  const registration = await navigator.serviceWorker.register(swUrl);\n  registration.onupdatefound = () => {\n    const installingWorker = registration.installing;\n    if (installingWorker == null) {\n      return;\n    }\n    installingWorker.onstatechange = () => {\n      if (installingWorker.state === 'installed') {\n        if (navigator.serviceWorker.controller) {\n          // At this point, the updated precached content has been fetched,\n          // but the previous service worker will still serve the older\n          // content until all client tabs are closed.\n          console.log(\n            'New content is available and will be used when all ' +\n            'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n          );\n\n          // Execute callback\n          if (config && config.onUpdate) {\n            config.onUpdate(registration);\n          }\n        } else {\n          // At this point, everything has been precached.\n          // It's the perfect time to display a\n          // \"Content is cached for offline use.\" message.\n          console.log('Content is cached for offline use.');\n\n          // Execute callback\n          if (config && config.onSuccess) {\n            config.onSuccess(registration);\n          }\n        }\n      }\n    };\n  };\n  return registration;\n}\n\nasync function checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  const response = await fetch(swUrl);\n\n  // Ensure service worker exists, and that we really are getting a JS file.\n  const contentType = response.headers.get('content-type');\n  if (\n    response.status === 404 ||\n    (contentType != null && contentType.indexOf('javascript') === -1)\n  ) {\n    // No service worker found. Probably a different app. Reload the page.\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister().then(() => {\n        window.location.reload();\n      });\n    });\n  } else {\n    // Service worker found. Proceed as normal.\n    return registerValidSW(swUrl, config);\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport * as serviceWorker from './service_worker';\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register(\"./firebase-messaging-sw.js\");\n}\n"],"sourceRoot":""}